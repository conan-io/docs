#!groovyâ€‹

node('Linux') {
    String masterBranch = 'master'
    boolean isMaster = env.BRANCH_NAME == masterBranch

    stage('Clone sources') {
        checkout scm
    }

    def image = null
    stage('Build docker image') {
        image = docker.build('conan-docs', '-f .ci/Dockerfile .')  // It should cache the image
    }

    stage('Test build') {
        parallel html: {
            image.inside {
                sh 'make html'
            }
        },
        pdf: {
            image.inside {
                sh 'make latex'
            }
        },
        spelling: {
            image.inside {
                sh 'make spelling'
            }
        },
        linkcheck: {
            image.inside {
                def status = sh(returnStatus: true, script: 'make linkcheck > links_output.txt')
                sh 'cat links_output.txt'
                if (status != 0) {
                    def broken_links = sh(returnStdout: true , script: 'cat links_output.txt | grep broken')
                    echo "Broken Links: \n ${broken_links}"
                    def subject = "Broken links in `conan-io/docs`: ${env.BUILD_URL}"
                    def summary = "${subject}\n```\n${broken_links}\n```"
                    slackSend (color: '#FF0000', message: summary)
                }
            }
        }
    }

    // 'master' branch is published to GH pages
    if (isMaster) {
        build(job: 'Conan-Docs-Publish', propagate: true, wait: true, parameters: [
            [$class: 'StringParameterValue', name: 'latest', value: masterBranch],
            [$class: 'StringParameterValue', name: 'prefix', value: 'https://docs.conan.io/'],
            [$class: 'BooleanParameterValue', name: 'publish', value: true]
        ])
    }
}
