#!groovyâ€‹

node('Linux') {
    String masterBranch = 'master'
    String branch = env.BRANCH_NAME
    boolean publishDocs = (branch == masterBranch) || (branch.startsWith("release/"))

    stage('Clone sources') {
        checkout scm
    }

    def docsImage = docker.image("conanio/ci-docs")

    docsImage.inside {
        stage('Test build') {
            parallel html: {
                sh 'make html'
            },
            pdf: {
                sh 'make latex'
            },
            spelling: {
                sh 'make spelling'
            },
            linkcheck: {
                def status = sh(returnStatus: true, script: 'make linkcheck | tee links_output.txt')
                sh 'cat links_output.txt'
                if (status != 0) {
                    def broken_links = sh(returnStdout: true , script: 'cat links_output.txt | grep broken')
                    echo "Broken Links: \n ${broken_links}"
                    def subject = "Broken links in `conan-io/docs`: ${env.BUILD_URL}"
                    def summary = "${subject}\n```\n${broken_links}\n```"
                    slackSend (color: '#FF0000', message: summary)
                }
            } 
        }
    }

    if (publishDocs) {
        String branches = sh(script: 'python .ci/scripts/get_branches.py', returnStdout: true).trim().readLines().join(',')
        echo "Will generate docs for ${branches}"
        build(job: 'Conan-Docs-Publish', propagate: true, wait: true, parameters: [
            [$class: 'StringParameterValue', name: 'branches', value: branches],
            [$class: 'BooleanParameterValue', name: 'publish', value: true]
        ])
    }
}
