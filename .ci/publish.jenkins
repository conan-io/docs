#!groovyâ€‹


// TODO: Move to a file and avoid modifying CI script
Map<String, String> versions = [
        'release/1.59.0': 'en/1.59',
        'release/1.58.0': 'en/1.58',
        'release/1.57.0': 'en/1.57',
        'release/1.56.0': 'en/1.56',
        'release/1.55.0': 'en/1.55',
        'release/1.54.0': 'en/1.54',
        'release/1.53.0': 'en/1.53',
        'release/1.52.0': 'en/1.52',
        'release/1.51.3': 'en/1.51',
        'release/1.50.2': 'en/1.50',
        'release/1.49.0': 'en/1.49',
        'release/1.48.2': 'en/1.48',
        'release/1.47.0': 'en/1.47',
        'release/1.46.2': 'en/1.46',
        'release/1.45.0': 'en/1.45',
        'release/1.44.1': 'en/1.44',
        'release/1.43.4': 'en/1.43',
        'release/1.42.2': 'en/1.42',
        'release/1.41.0': 'en/1.41',
        'release/1.40.4': 'en/1.40',
        'release/1.39.0': 'en/1.39',
        'release/1.38.0': 'en/1.38',
        'release/1.37.2': 'en/1.37',
        'release/1.36.0': 'en/1.36',
        'release/1.35.2': 'en/1.35',
        'release/1.34.1': 'en/1.34',
        'release/1.33.1': 'en/1.33',
        'release/1.32.1': 'en/1.32',
        'release/1.31.4': 'en/1.31',
        'release/1.30.2': 'en/1.30',
        'release/1.29.2': 'en/1.29',
        'release/1.28.2': 'en/1.28',
        'release/1.27.1': 'en/1.27',
        'release/1.26.1': 'en/1.26',
        'release/1.25.2': 'en/1.25',
        'release/1.24.1': 'en/1.24',
        'release/1.23.0': 'en/1.23',
        'release/1.22.3': 'en/1.22',
        'release/1.21.3': 'en/1.21',
        'release/1.20.5': 'en/1.20',
        'release/1.19.3': 'en/1.19',
        'release/1.18.5': 'en/1.18',
        'release/1.17.2': 'en/1.17',
        'release/1.16.1': 'en/1.16',
        'release/1.15.2': 'en/1.15',
        'release/1.14.5': 'en/1.14',
        'release/1.13.3': 'en/1.13',
        'release/1.12.3': 'en/1.12',
        'release/1.11.2': 'en/1.11',
        'release/1.10.2': 'en/1.10',
        'release/1.9.4' : 'en/1.9',
        'release/1.8.4' : 'en/1.8',
        'release/1.7.4' : 'en/1.7',
        'release/1.6.1' : 'en/1.6',
        'release/1.5.2' : 'en/1.5',
        'release/1.4.5' : 'en/1.4',
        'release/1.3.3' : 'en/1.3',
        'release/2.0.0-beta': '2.0'
        ]

def latest_v1_branch = 'master'
def latest_v1_folder = '1'

node('Linux') {

    String prefix = 'https://docs.conan.io/' //params.prefix ?: "${BUILD_URL}artifact/gh-pages/"
    stage('Check params') {

        echo """
            Generate Conan docs webpage
             - latest_v1_branch: ${latest_v1_branch}
             - latest_v1_folder: ${latest_v1_folder}
             - params.publish: ${params.publish}
             - prefix: ${prefix}
             - versions: latest (${latest_v1_branch}), ${versions.collect({key, value -> value }).join(', ')}
        """
        versions[latest_v1_branch] = latest_v1_folder
    }

    def image = null
    stage('Build docker image') {
        // Build the docker image using the same commit as the current 'publish.jenkins' file
        dir('tmp') {
            checkout scm
            image = docker.build('conan-docs', '-f .ci/Dockerfile .')  // It should cache the image
            deleteDir()
        }
    }

    stage('Prepare sources as worktrees') { // Do this sequentially
        sh 'git clone --bare https://github.com/conan-io/docs.git src'
        dir('src') {
            versions.each { branchName, folderName ->
                sh "git fetch origin ${branchName}:${branchName}"
                sh "git worktree add ../${folderName} ${branchName}"
            }
            // Prepare the worktree for gh-pages too
            sh 'git fetch origin gh-pages:gh-pages'  // TODO: This is a very bad idea, we are retrieving something (100s Mb) we are going to remove
            sh 'git worktree add ../gh-pages gh-pages'
        }
        sh 'rm -fr gh-pages/.git'
        versions.each { branchName, folderName ->
            sh "rm -fr gh-pages/${branchName} || true"
        }
    }

    // FIXME: we have to generate the docs in parallel in a maximum of a certain concurrency
    // size or the docs generation will fail
    // in the near future we should only have to generate the branches that must be published
    def number_of_parallel_blocks = 3
    def versions_blocks = versions.keySet().collate( versions.size().intdiv( number_of_parallel_blocks ) )

    for (version_block in versions_blocks) {
        Map parallelJobs = [:]
        def map_block = versions.subMap(version_block)
        map_block.each { key, value ->
            String branchName = key
            String folderName = value
            parallelJobs[folderName] = {
                echo "Run parallel job for ${branchName} inside ${folderName}"
                image.inside {
                    stage('Prepare sources') {
                        writeJSON json: versions, file: "${folderName}/versions.json"
                        if (folderName != latest_v1_folder) {
                            sh "rm -fr ${folderName}/_themes/conan"
                            sh "cp -a ${latest_v1_folder}/_themes/. ${folderName}/_themes/"
                        }
                        if (folderName == '2.0') {
                            def conanBranch = 'release/2.0-beta'
                            def conan_repo_url = 'https://github.com/conan-io/conan.git'
                            stage('Clone sources') {
                                def cloneConan = "git clone --single-branch -b ${conanBranch} --depth 1 ${conan_repo_url} 2.0/conan_sources"
                                sh(script: cloneConan)
                            }
                            // for some reason even adding this to autodoc_mock_imports
                            // does not work, se we have to install the real dependency
                            sh(script: 'pip3 install colorama')
                        }
                    }
                    stage('HTML') {
                        sh "sphinx-build -W -b html -d ${folderName}/_build/.doctrees ${folderName}/ gh-pages/${folderName}"
                    }

                    stage('PDF') {
                        sh "sphinx-build -W -b latex -d ${folderName}/_build/.doctrees ${folderName}/ ${folderName}/_build/latex"
                        sh "make -C ${folderName}/_build/latex all-pdf"
                        sh "cp ${folderName}/_build/latex/conan.pdf gh-pages/${folderName}/conan.pdf"
                    }
                    if (folderName=='2.0') {
                        sh 'rm -fr 2.0/conan_sources'
                    }
                }
            }
        }
        stage('Generate docs parallel block') {
            parallelJobs.failFast = true
            parallel parallelJobs
        }
    }


    stage('Prepare gh-branch') {
        dir('gh-pages') {
            // FIXME: this is to not break all links from https://docs.conan.io/en/latest/
            // we copy all the /1 folder to /en/latest and then replace all html files
            // there with redirects to https://docs.conan.io/en/latest/1
            // remove when most of the traffic in the docs is for 2.X docs
            sh 'mkdir -p en/latest'
            sh "cp -R ${latest_v1_folder}/* en/latest"
            sh "python ../1/create_redirects.py ../gh-pages/latest --old=en/latest --new=1"

            // sh 'cp src/versions.json versions.json'  // TODO: File is not used, remove from 'gh-pages' branch
            sh "cp ${latest_v1_folder}/404.html 404.html"
            String content = readFile('404.html')
            String prefixLatest = "${prefix}/${latest_v1_folder}"
            content = content.replaceAll('href="_', "href=\"${prefixLatest}/_")
            content = content.replaceAll('src="_', "src=\"${prefixLatest}/_")
            content = content.replaceAll('alt="_', "alt=\"${prefixLatest}/_")
            content = content.replaceAll('internal" href="', "internal\" href=\"${prefixLatest}/")
            content = content.replaceAll('"search.html"', "\"${prefixLatest}/search.html\"")
            content = content.replaceAll('"genindex.html"', "\"${prefixLatest}/genindex.html\"")
            writeFile(file: '404.html', text: content)
        }
    }

    stage('Archive generated folder') {
        archiveArtifacts artifacts: 'gh-pages/**/*.*'
        echo "Inspect generated webpage at ${BUILD_URL}artifact/gh-pages/index.html"
    }

    // if (params.publish) {
    //     stage('Publish to gh-pages') {
    //         dir('gh-pages') {
    //             sh 'git init .'
    //             sh 'git checkout -b gh-pages'
    //             sh 'git add .'
    //             sh 'git config user.email "conanci@jfrog.com"'
    //             sh 'git config user.name "ConanCI bot"'
    //             sh "git commit -m \"Automatic deploy (build number ${BUILD_NUMBER})\""
    //             withCredentials([usernamePassword(credentialsId: 'conanci-gh-token', usernameVariable: 'GH_USER', passwordVariable: 'GH_PASS')]) {
    //                 sh "git remote add origin-pages https://$GH_USER:$GH_PASS@github.com/conan-io/docs.git"
    //                 sh 'git push --quiet --force origin-pages gh-pages'
    //             }
    //         }
    //     }
    // }
}
