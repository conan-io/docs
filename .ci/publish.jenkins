#!groovyâ€‹


// TODO: Move to a file and avoid modifying CI script
Map<String, String> versions = [
        '2.0':  'release/2.0.0-beta',
        '1.59': 'release/1.59.0',
        '1.58': 'release/1.58.0',
        '1.57': 'release/1.57.0',
        '1.56': 'release/1.56.0',
        '1.55': 'release/1.55.0',
        '1.54': 'release/1.54.0',
        '1.53': 'release/1.53.0',
        '1.52': 'release/1.52.0',
        '1.51': 'release/1.51.3',
        '1.50': 'release/1.50.2',
        '1.49': 'release/1.49.0',
        '1.48': 'release/1.48.2',
        '1.47': 'release/1.47.0',
        '1.46': 'release/1.46.2',
        '1.45': 'release/1.45.0',
        '1.44': 'release/1.44.1',
        '1.43': 'release/1.43.4',
        '1.42': 'release/1.42.2',
        '1.41': 'release/1.41.0',
        '1.40': 'release/1.40.4',
        '1.39': 'release/1.39.0',
        '1.38': 'release/1.38.0',
        '1.37': 'release/1.37.2',
        '1.36': 'release/1.36.0',
        '1.35': 'release/1.35.2',
        '1.34': 'release/1.34.1',
        '1.33': 'release/1.33.1',
        '1.32': 'release/1.32.1',
        '1.31': 'release/1.31.4',
        '1.30': 'release/1.30.2',
        '1.29': 'release/1.29.2',
        '1.28': 'release/1.28.2',
        '1.27': 'release/1.27.1',
        '1.26': 'release/1.26.1',
        '1.25': 'release/1.25.2',
        '1.24': 'release/1.24.1',
        '1.23': 'release/1.23.0',
        '1.22': 'release/1.22.3',
        '1.21': 'release/1.21.3',
        '1.20': 'release/1.20.5',
        '1.19': 'release/1.19.3',
        '1.18': 'release/1.18.5',
        '1.17': 'release/1.17.2',
        '1.16': 'release/1.16.1',
        '1.15': 'release/1.15.2',
        '1.14': 'release/1.14.5',
        '1.13': 'release/1.13.3',
        '1.12': 'release/1.12.3',
        '1.11': 'release/1.11.2',
        '1.10': 'release/1.10.2',
        '1.9:': 'release/1.9.4',
        '1.8:': 'release/1.8.4',
        '1.7:': 'release/1.7.4',
        '1.6:': 'release/1.6.1',
        '1.5:': 'release/1.5.2',
        '1.4:': 'release/1.4.5',
        '1.3:': 'release/1.3.3'
        ]

node('Linux') {

    def latest_v1_branch = "master"

    // for v2 we are not going to use a "master" branch, just use the release branch as main branch
    // so the /2 and /2.X folders in the docs will be completely equivalent
    // /2 will always redirect to /2.X
    // Use the first entry of the versions map as the latest:
    def latest_v2_branch = versions.values().first()
    def latest_v2_folder = '2'

    versions['latest'] = latest_v1_branch
    versions[latest_v2_folder] = latest_v2_branch

    String prefix = params.prefix ?: "${BUILD_URL}artifact/gh-pages/"
    stage('Check params') {
        if (params.publish) {
            assert params.prefix, 'Provide the prefix (base URL) if you are going to publish'
        }

        echo """
            Generate Conan docs webpage
             - params.publish: ${params.publish}
             - prefix: ${prefix}
             - versions: ${latest_v2_folder} (${latest_v2_branch}), latest (${latest_v1_branch}), ${versions.collect({key, value -> value }).join(', ')}
        """
    }

    def image = null
    stage('Build docker image') {
        // Build the docker image using the same commit as the current 'publish.jenkins' file
        dir('tmp') {
            checkout scm
            image = docker.build('conan-docs', '-f .ci/Dockerfile .')  // It should cache the image
            deleteDir()
        }
    }

    stage('Prepare sources as worktrees') { // Do this sequentially
        sh 'git clone --bare https://github.com/conan-io/docs.git src'
        dir('src') {
            versions.each { folderName, branchName ->
                sh "git fetch origin ${branchName}:${branchName}"
                sh "git worktree add ../${folderName} ${branchName}"
            }
            // Prepare the worktree for gh-pages too
            sh 'git fetch origin gh-pages:gh-pages'  // TODO: This is a very bad idea, we are retrieving something (100s Mb) we are going to remove
            sh 'git worktree add ../gh-pages gh-pages'
        }
        sh 'rm -fr gh-pages/.git'
        sh 'rm -fr gh-pages/en'
    }

    // FIXME: we have to generate the docs in parallel in a maximum of a certain concurrency
    // size or the docs generation will fail
    // in the near future we should only have to generate the branches that must be published
    def number_of_parallel_blocks = 3
    def versions_blocks = versions.keySet().collate( versions.size().intdiv( number_of_parallel_blocks ) )

    for (version_block in versions_blocks) {
        Map parallelJobs = [:]
        def map_block = versions.subMap(version_block)
        map_block.each { key, value ->
            String folderName = key
            String branchName = value
            parallelJobs[folderName] = {
                echo "Run parallel job for ${branchName} inside ${folderName}"
                image.inside {
                    stage('Prepare sources') {
                        writeJSON json: versions, file: "${folderName}/versions.json"
                        if (folderName != 'latest') {
                            sh "rm -fr ${folderName}/_themes/conan"
                            sh "cp -a latest/_themes/. ${folderName}/_themes/"
                        }

                        // FIXME: In the future we have to clone the sources for each release branch in Conan
                        // so that the releases get the docstrings right
                        if (folderName.startsWith("2")) {
                            // FIXME: point this to the right branch when we release 2.0
                            def conanBranch = 'release/2.0-beta'
                            def conan_repo_url = 'https://github.com/conan-io/conan.git'
                            stage('Clone sources') {
                                def cloneConan = "git clone --single-branch -b ${conanBranch} --depth 1 ${conan_repo_url} ${folderName}/conan_sources"
                                sh(script: cloneConan)
                            }
                            // for some reason even adding this to autodoc_mock_imports
                            // does not work, se we have to install the real dependency
                            sh(script: 'pip3 install colorama')
                        }
                    }
                    stage('HTML') {
                        sh "sphinx-build -W -b html -d ${folderName}/_build/.doctrees ${folderName}/ gh-pages/en/${folderName}"
                    }

                    stage('PDF') {
                        sh "sphinx-build -W -b latex -d ${folderName}/_build/.doctrees ${folderName}/ ${folderName}/_build/latex"
                        sh "make -C ${folderName}/_build/latex all-pdf"
                        sh "cp ${folderName}/_build/latex/conan.pdf gh-pages/en/${folderName}/conan.pdf"
                    }
                    if (folderName.startsWith("2")) {
                        sh "rm -fr ${folderName}/conan_sources"
                    }
                }
            }
        }
        stage('Generate docs parallel block') {
            parallelJobs.failFast = true
            parallel parallelJobs
        }
    }


    stage('Prepare gh-branch') {
        dir('gh-pages') {
            // sh 'cp src/versions.json versions.json'  // TODO: File is not used, remove from 'gh-pages' branch
            sh 'cp en/latest/404.html 404.html'

            String content = readFile('404.html')
            String prefixLatest = "${prefix}en/latest"
            content = content.replaceAll('href="_', "href=\"${prefixLatest}/_")
            content = content.replaceAll('src="_', "src=\"${prefixLatest}/_")
            content = content.replaceAll('alt="_', "alt=\"${prefixLatest}/_")
            content = content.replaceAll('internal" href="', "internal\" href=\"${prefixLatest}/")
            content = content.replaceAll('"search.html"', "\"${prefixLatest}/search.html\"")
            content = content.replaceAll('"genindex.html"', "\"${prefixLatest}/genindex.html\"")
            writeFile(file: '404.html', text: content)
        }
    }

    stage('Archive generated folder') {
        archiveArtifacts artifacts: 'gh-pages/**/*.*'
        echo "Inspect generated webpage at ${BUILD_URL}artifact/gh-pages/index.html"
    }

    if (params.publish) {
        stage('Publish to gh-pages') {
            dir('gh-pages') {
                sh 'git init .'
                sh 'git checkout -b gh-pages'
                sh 'git add .'
                sh 'git config user.email "conanci@jfrog.com"'
                sh 'git config user.name "ConanCI bot"'
                sh "git commit -m \"Automatic deploy (build number ${BUILD_NUMBER})\""
                withCredentials([usernamePassword(credentialsId: 'conanci-gh-token', usernameVariable: 'GH_USER', passwordVariable: 'GH_PASS')]) {
                    sh "git remote add origin-pages https://$GH_USER:$GH_PASS@github.com/conan-io/docs.git"
                    sh 'git push --quiet --force origin-pages gh-pages'
                }
            }
        }
    }
}
