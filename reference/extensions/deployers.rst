.. _reference_extensions_deployers:

Deployers
=========

Deployers are a mechanism to facilitate copying files form one folder, usually the Conan cache, to user folders.
While Conan provides two built-in ones (``full_deploy`` and ``direct_deploy``), users can easily manage their own
with ``conan config install``.

Deployers run before generators, and they can change the target folders.
For example, if the ``--deploy=full_deploy`` deployer runs before ``CMakeDeps``,
the files generated by ``CMakeDeps`` will point to the local copy in the user folder done by the ``full_deploy`` deployer,
and not to the Conan cache.

Deployers can be multi-configuration. Running ``conan install . --deploy=full_deploy`` repeatedly for different profiles
can achieve a fully self-contained project, including all the artifacts, binaries, and build files.
This project would be completely independent of Conan and no longer require it at all to build.


Built-in deployers
------------------

.. _reference_extensions_deployer_full_deploy:

full_deploy()
^^^^^^^^^^^^^

Deploys to ``output_folder`` + ``host/dep/0.1/Release/x86_64`` subfolder


.. _reference_extensions_deployer_direct_deploy:

direct_deploy()
^^^^^^^^^^^^^^^

Deploys only your direct dependencies to ``output_folder``



Custom deployers
----------------

Custom deployers can be managed via ``conan config install``. When looking for a specific deployer,
Conan will look in these locations for the deployer in the following order:

#. Absolute paths
#. Relative to cwd
#. In the ``[CONAN_HOME]/extensions/deploy`` folder
#. Built-in deployers

For each installed file, Conan will look for a ``deploy()`` method which to call.
The function signature of your custom deployers should be as follows:

**my_custom_deployer.py**

.. code-block:: python

    def deploy(graph: conans.client.graph.graph.DepsGraph, output_folder: str):

(Note that the arguments are passed as named parameters, so both the ``graph`` and ``output_folder`` names are mandatory)

Your custom deployer can then be invoked as if it were a built-in deployer using the filename in which it's found,
in this case ``conan install . --deploy=my_custom_deployer``.

See the :ref:`custom deployers<examples_extensions_deployers>` section for examples on how to implement your own deployers.