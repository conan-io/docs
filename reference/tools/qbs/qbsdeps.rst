.. _conan_tools_qbsdeps:

QbsDeps
=========

The ``QbsDeps`` generator produces the necessary files for each dependency to be able to use the
qbs ``Depends`` item to locate the dependencies. It can be used like:

.. code-block:: python

    from conan import ConanFile

    class App(ConanFile):
        settings = "os", "arch", "compiler", "build_type"
        requires = "hello/0.1"
        generators = "QbsDeps"


It is also possible to use ``QbsDeps`` manually in the ``generate()`` method:

.. code-block:: python

    from conan import ConanFile
    from conan.tools.qbs import QbsDeps

    class App(ConanFile):
        settings = "os", "arch", "compiler", "build_type"
        requires = "hello/0.1"

        def generate(self):
            deps = QbsDeps(self)
            deps.generate()

The dependency to the application can be added using the ``Depends`` item:

.. code-block:: js
    :caption: **project.qbs**
    :emphasize-lines: 2

    CppApplication {
        Depends { name: "hello"; version: "0.1" }
        files: "main.c"
        qbs.installPrefix: ""
        install: true
        qbsModuleProviders: "conan"
    }

Note that we are setting the ``qbsModuleProviders`` property to ``"conan"`` in order to tell
Qbs that dependencies are generated by Conan.

We install dependencies using the ``conan install`` command.

.. code-block:: text

    $ conan install . --output-folder=build --build missing

Finally, we need to tell Qbs where to find the generated dependencies:

.. code-block:: text

    $ qbs resolve moduleProviders.conan.installDirectory:build
    $ qbs build

Luckily, this complexity goes away when using the Qbs helper.

.. seealso::

    - Check the :ref:`Qbs helper <conan_tools_qbs_helper>` for details.

Reference
---------

.. currentmodule:: conan.tools.qbs.qbsdeps

.. autoclass:: QbsDeps
    :members: