.. _tutorial_devops_consuming_conan_center:

Using ConanCenter packages in production
========================================

ConanCenter is a fantastic resource that contains a huge knowledge base generated by the community on how to create and build Conan packages for a lot of open source third party libraries and applications.

It also contains a wide range of pre-compiled binaries for multiple OS, including Windows, Linux and OSX, a variety of compilers, compiler versions, static and shared libraries, etc. These precompiled packages can be very useful to do quick experiments, testing, onboarding, and they also serve as a proof that the recipes for those packages can work solidly for that wide range of configurations.

However, it is not a good practice to depend directly on ConanCenter for production systems, for several reasons:

- ConanCenter continuously gets contributions, fixes and improvements from the community, but that also means that ConanCenter can only guarantee that it works with the latest Conan version (see the :ref:`stability commitment in the introduction<stability>`). If you want to update your Conan version at a different pace, ConanCenter packages that introduce latest version features will break.
- The changes in recipes might also unpexectedly cause bugs and other issues. Recipes and package updates might bump dependencies versions to use the latest, forcing a continuous update over all dependencies versions. That can cause version conflicts if your project doesn't bump dependencies versions at the same pace.
- Fixes to ConanCenter recipes can take a while to be merged (weeks), because there are too many contributions to be reviewed. If you rely on a fix that you contributed and it is urgent for your production system, you might need to wait.
- Binary configurations can be discontinued in ConanCenter, when new compiler versions are released and ConanCenter starts to build them, it can drop some of the older versions.
- Outages, maintenance windows and other service interruptions can happen, ranging from a few minutes to days. The infrastructure to host central repositories is typically large and complex, rely on cloud providers that sometimes have their own issues, networks, CDN, etc.
- Security issues. Even if the process to add packages to ConanCenter is very strict, with human reviews for every package and many automated checks and processes, eventually all systems are subject to attempts of supply chain attacks.

Most of these reasons are not unique to Conan, but to every other package manager for other programming languages. The general devops known good practice is that you shouldn't rely on central repositories on production systems, but host your own copy of the packages that you need for production.

This is the main idea: **host your own copy of the packages you need for production in your own server**. This could be done by just downloading binaries from ConanCenter and then uploading them to your own server. However, it is much better to fully own the complete supply chain and create the binaries in your own CI systems. So the recommended flow to use ConanCenter packages in production would be:

- Create a fork of the ConanCenter Github repository: https://github.com/conan-io/conan-center-index
- Create a list of the packages and versions you need for your projects. This list can be added to the fork too, and maintained there (packages can be added and removed with PRs when the teams need them).
- Create a script that first ``conan export`` all the packages in your list, then ``conan create --build=missing`` them. Do not add ``user/channel`` to these packages, it is way simpler to use them as ``zlib/1.2.13`` without user-channel.
- Upload your build packages to your own server, that you use in production, instead of ConanCenter.


This flow is relatively straightforward, and has many advantages that mitigate the above risks:

- No central repository outage can affect your builds.
- No changes in the central repository can break your projects.
- You can customize, adapt, fix and perfectly control what versions are used, and release fixes in minutes, not weeks. You can apply customizations that wouldn't be accepted in the central repository.
- You fully own the supply chain, from the source (recipes) to the binaries, eliminating in practice the majority of potential supply chain attacks of central repositories.


Updating from the upstream ``conan-center-index`` Github repo is still possible, and it can be done in a fully controlled way, highly reducing risks:

- Merge the latest changes in the upstream main fork of ``conan-center-index`` into your fork.
- You can check and audit those changes if you want to, analyzing the diffs (some automation that trims the diffs of recipes that you don't use could be useful)
- Firing the above process will efficiently rebuild new binaries are needed. If your recipes are not affected by changes, the process will avoid rebuilding binaries (thanks to ``--build=missing``).
- You can upload the packages to a secondary "test" server repository. Then test your project against that test server, to check that your project is not broken by the new ConanCenter packages.
- Once you verify that everything is good with the new packages, you can copy them from the secondary "test" repository to your main production repository to start using them.


.. note::

  **Best practices**

  - Do not use ConanCenter packages on production systems, store the packages you need in your own server and use them from there.
  - Create your own binaries from your fork to completely own the pipeline, remove all breakage risks, accelerate fixes and remove security supply chain attacks. The process is not complicated and really worth it.
  - You can drop the ``conancenter`` remote from your clients to make sure packages are not accidentally downloaded from there. Use ``conan config install`` with your own ``remotes.json`` file to remove ``conancenter`` default remote.
