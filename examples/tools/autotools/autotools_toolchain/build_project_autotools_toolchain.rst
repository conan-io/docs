.. _examples_tools_autotools_autotools_toolchain_build_project_autotools_toolchain:

Build a simple Autotools project using Conan
============================================

In this example, we are going to create a string formatter application
that uses one of the most popular C++ libraries: `fmt <https://fmt.dev/latest/index.html/>`__.

We'll use `Autotools <https://www.gnu.org/software/automake/manual/html_node/Autotools-Introduction.html>`_ as build system and `pkg-config <https://www.freedesktop.org/wiki/Software/pkg-config/>`_ as helper tool in this case, so you should get them installed
on Linux and Mac before going forward with this example.

Please, at first, clone the sources to recreate this project, you can find them in the
`examples2.0 repository <https://github.com/conan-io/examples2>`_ in GitHub:

.. code-block:: shell

    git clone https://github.com/conan-io/examples2.git
    cd examples2/examples/tools/autotools/autotoolstoolchain/string_formatter

We start from a very simple C++ language project with this structure:

.. code-block:: text

    .
    ├── configure.ac
    ├── Makefile.am
    ├── conanfile.txt
    └── src
        └── main.cpp

This project contains a basic `configure.ac <https://www.gnu.org/software/autoconf/manual/autoconf-2.60/html_node/Writing-configure_002eac.html>_` including the **fmt** pkg-config dependency and the
source code for the string formatter program in *main.cpp*.

Let's have a look at the *main.cpp* file, it only prints a default message, but uses ``fmt::print`` method for it.

.. code-block:: cpp
    :caption: **main.c**

    #include <cstdlib>
    #include <fmt/core.h>

    int main() {
        fmt::print("{} - The C++ Package Manager!\n", "Conan");
        return EXIT_SUCCESS;
    }

The ``configure.ac`` tells us about our project will a C++ compiler and a pkg-config module named as ``fmt.pc``

.. code-block:: text
    :caption: **configure.ac**

    AC_INIT([stringformatter], [0.1.0])
    AM_INIT_AUTOMAKE([1.10 -Wall no-define foreign])
    AC_CONFIG_SRCDIR([src/main.cpp])
    AC_CONFIG_FILES([Makefile])
    PKG_CHECK_MODULES([fmt], [fmt])
    AC_PROG_CXX
    AC_OUTPUT

And, the *Makefile.am* has ``string_formatter`` as our expected executable, and it will be linked to the ``fmt`` library.

.. code-block:: text
    :caption: **Mafile.am**

    AUTOMAKE_OPTIONS = subdir-objects
    ACLOCAL_AMFLAGS = ${ACLOCAL_FLAGS}

    bin_PROGRAMS = string_formatter
    string_formatter_SOURCES = src/main.cpp
    string_formatter_CPPFLAGS = $(fmt_CFLAGS)
    string_formatter_LDADD = $(fmt_LIBS)


The *conanfile.txt* looks simple, just install **fmt** and uses two generatos to build our project

.. code-block:: ini
    :caption: **conanfile.txt**

    [requires]
    fmt/9.1.0

    [generators]
    AutotoolsToolchain
    PkgConfigDeps

In this case, we will use :ref:`PkgConfigDeps<conan_tools_gnu_pkgconfigdeps>` to generate information about where the **fmt** library
files are installed thanks to the `*.pc` files and :ref:`AutotoolsToolchain<conan_tools_gnu_autotoolstoolchain>` to pass build information
to *autotools* using a `conanbuild[.sh|.bat]` file that describes the compilation environment.

We will use Conan to install **fmt** and generate the files that Autotools needs to find this library and build our project.


Building on Linux and macOS
---------------------------

First, we should install the requirements. For this example we didn't consider your profile, but ``fmt`` is higly compatible with many different configurations.

.. code-block:: shell

    conan install . --build=missing

Now we are ready to build and run our **string_formatter** app:

.. code-block:: shell

    source conanbuild.sh

The ``conanbuild.sh`` generated by the :ref:`VirtualBuildEnv<conan_tools_env_virtualbuildenv>` will fill all environment
variables according to your profile, plus, Autotools, fmt .pc files and ``PKG_CONFIG_PATH`` as environment variable.

.. code-block:: shell

    aclocal
    automake --add-missing
    autoconf
    ./configure
    make

Now we generate the ``configure`` and ``Makefile``, then we build our project by running the ``make`` command.

As final result, we will have the binary ``string_formatter`` installed in our example folder.

.. code-block:: shell

    ./string_formatter
    Conan - The C++ Package Manager!


Building on Windows
-------------------

To build on Windows, we will use a pre-defined profile as an example to give a better view of our current configuration.
Also, we will be running on the default command prompt, it can be invoked by ``cmd.exe``.

.. code-block:: ini
    :caption: **profiles/msys2**

    [settings]
    arch=x86_64
    build_type=Release
    compiler=gcc
    compiler.exception=seh
    compiler.libcxx=libstdc++
    compiler.threads=posix
    compiler.version=11
    os=Windows
    [options]
    */*:shared=True
    [conf]
    tools.cmake.cmaketoolchain:generator=MSYS Makefiles
    tools.microsoft.bash:subsystem=msys2
    tools.microsoft.bash:active=True
    [tool_requires]
    msys2/cci.latest
    autoconf/2.71
    automake/1.16.5
    pkgconf/1.9.3
    [buildenv]
    CC=gcc
    CXX=g++

With this profile, we will build on Windows, with MSYS2 support and GCC 11. Some build requirements will be needed too.

As the first step, we will install MSYS2 Conan package, to be able to run bash inside of our command prompt.

.. code-block:: batch

    conan install -r conancenter --requires=msys2/cci.latest -g VirtualBuildEnv
    conanbuild.bat
    set MSYSTEM=MSYS
    set MSYS2_PATH_TYPE=inherit
    set CHERE_INVOKING=1
    %MSYS_BIN%\bash.exe -l

Once we have installed ``msys2/cci.latest`` package, we can activate the environment generated by :ref:`VirtualBuildEnv<conan_tools_env_virtualbuildenv>`.
Then, we need to configure some environment variables required by MSYS2.

The environment variable ``%MSYS_BIN%`` is configured by the script ``conanbuild.bat`` so we do not need to find where the Conan package is installed.
As next step, we start the bash terminal embedded in the Conan package.

This extras steps are only needed because we are building our project manually on the terminal,
but in case it would be a regular Conan recipe, building a Conan package, it would not be necessary.
Now we are ready to build the example.

Now we should install and build the ``fmt`` with the msys custom profiles.
Note that we do not need to use activated bash configuration for this action, otherwise, it may raise an unix path error when building the library.

.. code-block:: shell

    conan install -r conancenter . --build=missing --profile:host=profiles/msys -c tools.microsoft.bash:active=False

And now we can generate shell scripts that should be loaded by our terminal and will configure our settings, options, and environment variables like ``PKG_CONFIG_PATH``.

.. code-block:: shell

    conan install -r conancenter . --profile:host=profiles/msys
    source conanbuild.sh

Finally, we can build our example just like on Linux or macOS.

.. code-block:: shell

    aclocal
    automake --add-missing
    autoconf
    ./configure
    make

The result will be the ``string_formatter.exe`` which should show an example message.

.. code-block:: shell

    ./string_formatter.exe
    Conan - The C++ Package Manager!
