
.. _examples-tools-use-different-toolchain-generator:

Using CMakeToolchain with different generators: Ninja example
=============================================================

This guide demonstrates how to use :ref:`CMakeToolchain<conan_tools_cmaketoolchain>` with predefined generators
like `Ninja <https://ninja-build.org/>`_ and how to configure it to use different generators.

Understanding CMake generators
------------------------------

The `CMake <https://cmake.org/>`_ client offers a variety of `generators <https://cmake.org/cmake/help/latest/manual/cmake-generators.7.html>`_ to create build system files.
If you want to use a generator other than the default chosen by CMake, you can configure ``tools.cmake.cmaketoolchain:generator``.

Please, note that `CMake <https://cmake.org/>`_ client is not the same as the Conan :ref:`CMake <conan_tools_cmake_helper>` helper.

To see which generators are available on your system, run:

.. code-block:: bash

    $ cmake --help

You can set this :ref:`configuration in your profile <reference_config_files_profiles_conf>`,
directly in the command line, or even in your :ref:`global configuration<reference_config_files_global_conf_patterns>`.

Using the Ninja generator by default in a profile
-------------------------------------------------

To set the Ninja generator as the default in a profile file,
add the entry ``[conf]`` to your profile with the generator value:

.. code-block:: text

    [settings]
    os=Linux
    arch=x86_64
    compiler=gcc
    compiler.version=13
    compiler.libcxx=libstdc++11
    compiler.cppstd=20
    build_type=Release

    [conf]
    tools.cmake.cmaketoolchain:generator=Ninja

Now, we will create a basic project based on the ``cmake_exe`` template as an example of a C++ project:

.. code-block:: bash

    $ conan new cmake_exe -d name=foo -d version=0.1.0

Then, we can build your project without specifying the generator in the command line:

.. code-block:: bash

    $ conan create .

This configuration will be passed to the ``conan_toolchain.cmake`` file, generated by ``CMakeToolchain``, then the Ninja generator will be used.
You should see the following output snippet indicating the Ninja generator is being used:

.. code-block:: bash

    Profile host:
    [settings]
    ...
    [conf]
    tools.cmake.cmaketoolchain:generator=Ninja

    ...
    foo/0.1.0: Calling build()
    foo/0.1.0: Running CMake.configure()
    foo/0.1.0: RUN: cmake -G "Ninja" ...

Conclusion
----------

This guide showed you how to configure `CMakeToolchain` to use different generators, specifically the Ninja generator,
through the command line, profile configuration, and global settings.
